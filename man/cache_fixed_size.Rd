% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache_fifo.R
\name{evict_fifo}
\alias{evict_fifo}
\alias{evict_lru}
\alias{cache_fixed_size}
\title{Fixed Size Cache}
\usage{
evict_fifo()

evict_lru()

cache_fixed_size(size = 100, base_cache = cache_memory(),
  eviction = evict_fifo())
}
\arguments{
\item{size}{The maximum number of key/values to keep in the cache.}

\item{base_cache}{The base cache, by default \code{\link{cache_memory}}.}

\item{eviction}{Eviction strategy; see below.}
}
\description{
A fixed cache which drops key/values when it gets too large. Uses any
underlying cache (by default, \code{\link{cache_memory}}), and evicts
according to a specified rule (by default, first-in, first-out).
}
\details{
You can define your own eviction strategy by creating a list with function
entries of \code{reset}, \code{add_key}, \code{hit_key}, \code{drop_key},
and \code{key_to_evict}; see the package source for examples.
}
\section{Functions}{
\itemize{
\item \code{evict_fifo}: First-in, first-out (FIFO) eviction strategy.

\item \code{evict_lru}: Least-recently-used (LRU) eviction strategy.
}}

\examples{
# Cache which remembers only the last function call
mem_runif <- memoise(runif, cache = cache_fixed_size(size = 1))
print(mem_runif(1))
print(mem_runif(1))  # Remembered
print(mem_runif(2))
print(mem_runif(1))  # Changed from last time
}
